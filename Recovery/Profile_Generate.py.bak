import numpy as np
import random as rnd

def sequence_sequence_profile_generate(seq1,seq2): # gap '-' is acceptable
    zero_Matrix=np.zeros([5,len(seq2)])
    sequences=[seq1,seq2]
    for int_sequences in range(len(seq1)):
        A_Val, G_Val, T_Val, C_Val, GaP_Val = 0,0,0,0,0
        for seq in sequences:
            if seq[int_sequences]=='A':
                A_Val += 0.5
            elif seq[int_sequences]=='G':
                G_Val += 0.5
            elif seq[int_sequences]=='T':
                T_Val += 0.5
            elif seq[int_sequences]=='C':
                C_Val += 0.5
            else:
                GaP_Val += 0.5
        zero_Matrix[0,int_sequences], zero_Matrix[1,int_sequences], zero_Matrix[2, int_sequences], zero_Matrix[3,int_sequences],zero_Matrix[4,int_sequences]\
            =A_Val, G_Val, T_Val, C_Val, GaP_Val

    return zero_Matrix

def profile_profile_toGen_new_profile(profileA,profileB):
    if len(profileA[0]) != len(profileB[0]):
        print("lengths of profiles are not equal!")
    else:
        New_Prof=np.zeros([21, len(profileB[0][0])])
        for i in range(len(profileA[0][0])):
            col_of_prof1, col_of_prof2 = profileA[0][::,i], profileB[0][::,i]
            int_col_profA, int_col_profB = [],[]
            for flt1 in col_of_prof1:
                int_val_col_1 = flt1*profileA[1]
                int_col_profA.append(int_val_col_1)
            for flt2 in col_of_prof2:
                int_val_col_2 =flt2*profileB[1]
                int_col_profB.append(int_val_col_2)

            averaged_col=[]
            for sum_iterator in range(len(int_col_profA)):
                averaged_col.append((int_col_profA[sum_iterator] + int_col_profB[sum_iterator])/(profileA[1]+profileB[1]))
            New_Prof[::,i]=averaged_col
    #New_Prof = New_Prof
    return New_Prof

def import_PAM_Matrix(PAM_Table):
    f=open(PAM_Table,'r')
    file=f.readlines()
    PAM_list=[]
    for i in file:
        line1=i.rstrip('\n')
        line=line1.split(';')
        PAM_list.append(line)
    return PAM_list

def sequence_to_profile(sequence):
    one_seq_profile=np.zeros([21,len(sequence)])
    PAM_tble = import_PAM_Matrix('/Users/ugurs.ahin/Desktop/DeNovo-master_Changed/Toolbar/Aligners/Protein_Alignment/PAM_table.csv')
    for i in range(len(sequence)):
        zero_col=np.zeros([21,1])
        cp=True
        for ite1 in range(len(PAM_tble[0])):
            if PAM_tble[ite1][0]==sequence[i]:
                zero_col[ite1,::]=1
                cp=False
                break
        one_seq_profile[::,i]=zero_col[::,0]

        if cp:
            one_seq_profile[20,i]=1

    return one_seq_profile

def generate_random_profile(length_of_profile, number_of_seq_in_profile):  # Generate random profile to compare
    Zero_Matrix=np.zeros([21,length_of_profile])
    unit=1/number_of_seq_in_profile
    for j in range(length_of_profile):
        choose_row=rnd.randint(0,20)
        for i in range(number_of_seq_in_profile):
            Zero_Matrix[choose_row,j]+=unit
            pos=rnd.randint(0,10)
            if pos==3 or pos==4:
                choose_row=20
            elif pos >= 8:
                choose_row=rnd.randint(0,20)
    new_Mat=Zero_Matrix
    return Zero_Matrix

def test():
    seq1 = 'AGTTCTC'
    seq2 = 'CGT-CTT'

    result = sequence_sequence_profile_generate(seq1, seq2)
    #print(result)

    ProfA, ProfB =generate_random_profile(30,2),generate_random_profile(30,2)
    ProfA,ProfB=[ProfA,5], [ProfB, 5]
    #print(profile_profile_toGen_new_profile(ProfA,ProfB))
    print(sequence_to_profile('A-R-TG'))
test()



